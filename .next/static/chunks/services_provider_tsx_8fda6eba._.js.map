{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/caizhihao/Desktop/mycode/web3/NFT-Market-ERC721/services/provider.tsx"],"sourcesContent":["\"use client\"\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\"\nimport React, { useEffect, useState } from \"react\"\nimport { createConfig, http, WagmiProvider } from \"wagmi\"\nimport { connectorsForWallets, RainbowKitProvider } from \"@rainbow-me/rainbowkit\"\nimport { hardhat, mainnet, Chain } from \"wagmi/chains\"\nimport { metaMaskWallet, walletConnectWallet, coinbaseWallet, rainbowWallet } from \"@rainbow-me/rainbowkit/wallets\"\n\nconst projectId = process.env.NEXT_PUBLIC_PROJECT_ID as string\n\n// 测试BTTC\nconst BitTorrent: Chain = {\n  id: 1029,\n  name: \"BitTorrent Chain Donau\",\n  nativeCurrency: {\n    decimals: 18,\n    name: \"BitTorrent\",\n    symbol: \"BTT\",\n  },\n  rpcUrls: {\n    default: { http: [\"https://pre-rpc.bt.io/\"] },\n  },\n  blockExplorers: {\n    default: { name: \"BitTorrent Block Explorer\", url: \"https://testscan.bt.io\" },\n  },\n  testnet: true,\n}\n\n// 自定义连接钱包\nconst connectors = connectorsForWallets(\n  [\n    {\n      groupName: \"Recommended\",\n      wallets: [metaMaskWallet, walletConnectWallet, coinbaseWallet, rainbowWallet],\n    },\n  ],\n  { appName: \"SaintNFT\", projectId }\n)\n\nconst config = createConfig({\n  connectors,\n  chains: [mainnet, hardhat, BitTorrent],\n  transports: {\n    [mainnet.id]: http(`https://eth-mainnet.g.alchemy.com/v2/${process.env.NEXT_PUBLIC_ALCHEMY_ID}`),\n    [hardhat.id]: http(\"http://127.0.0.1:8545\"),\n    [BitTorrent.id]: http(\"https://pre-rpc.bt.io/\"),\n  },\n})\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 3,\n    },\n  },\n})\n\nconst Provider = ({ children }: { children: React.ReactNode }) => {\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>{mounted && children}</RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n\nexport default Provider\n"],"names":[],"mappings":";;;;AAQkB;;AAPlB;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;AANA;;;;;;;AAQA,MAAM;AAEN,SAAS;AACT,MAAM,aAAoB;IACxB,IAAI;IACJ,MAAM;IACN,gBAAgB;QACd,UAAU;QACV,MAAM;QACN,QAAQ;IACV;IACA,SAAS;QACP,SAAS;YAAE,MAAM;gBAAC;aAAyB;QAAC;IAC9C;IACA,gBAAgB;QACd,SAAS;YAAE,MAAM;YAA6B,KAAK;QAAyB;IAC9E;IACA,SAAS;AACX;AAEA,UAAU;AACV,MAAM,aAAa,IAAA,6ZAAoB,EACrC;IACE;QACE,WAAW;QACX,SAAS;YAAC,kbAAc;YAAE,ubAAmB;YAAE,kbAAc;YAAE,ibAAa;SAAC;IAC/E;CACD,EACD;IAAE,SAAS;IAAY;AAAU;AAGnC,MAAM,SAAS,IAAA,uYAAY,EAAC;IAC1B;IACA,QAAQ;QAAC,6UAAO;QAAE,6UAAO;QAAE;KAAW;IACtC,YAAY;QACV,CAAC,6UAAO,CAAC,EAAE,CAAC,EAAE,IAAA,uUAAI,EAAC,AAAC,wCAA0E;QAC9F,CAAC,6UAAO,CAAC,EAAE,CAAC,EAAE,IAAA,uUAAI,EAAC;QACnB,CAAC,WAAW,EAAE,CAAC,EAAE,IAAA,uUAAI,EAAC;IACxB;AACF;AAEA,MAAM,cAAc,IAAI,wQAAW,CAAC;IAClC,gBAAgB;QACd,SAAS;YACP,WAAW,OAAO,KAAK;YACvB,OAAO;QACT;IACF;AACF;AAEA,MAAM,WAAW;QAAC,EAAE,QAAQ,EAAiC;;IAC3D,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,wSAAQ,EAAC;IAEvC,IAAA,ySAAS;8BAAC;YACR,WAAW;QACb;6BAAG,EAAE;IAEL,qBACE,4TAAC,sXAAa;QAAC,QAAQ;kBACrB,cAAA,4TAAC,gTAAmB;YAAC,QAAQ;sBAC3B,cAAA,4TAAC,2ZAAkB;0BAAE,WAAW;;;;;;;;;;;;;;;;AAIxC;GAdM;KAAA;uCAgBS","debugId":null}}]
}